import { Directive, Inject, Input, Optional, } from '@angular/core';
import { DynamicComponentInjectorToken, } from '../component-injector/token';
import { IoService } from '../io/io.service';
import * as i0 from "@angular/core";
import * as i1 from "../io/io.service";
/* eslint-disable @angular-eslint/no-conflicting-lifecycle */
export class DynamicIoDirective {
    constructor(ioService, componentInjector) {
        this.ioService = ioService;
        this.componentInjector = componentInjector;
        this.ioService.init(this.componentInjector);
    }
    get inputs() {
        return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;
    }
    get outputs() {
        return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;
    }
    ngOnChanges(changes) {
        this.ioService.update(this.inputs, this.outputs, this.inputsChanged(changes), this.outputsChanged(changes));
    }
    ngDoCheck() {
        this.ioService.maybeUpdate();
    }
    inputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicInputs' in changes ||
            'ndcDynamicInputs' in changes);
    }
    outputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicOutputs' in changes ||
            'ndcDynamicOutputs' in changes);
    }
}
/** @nocollapse */ /** @nocollapse */ DynamicIoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: DynamicIoDirective, deps: [{ token: i1.IoService }, { token: DynamicComponentInjectorToken, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ /** @nocollapse */ DynamicIoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: DynamicIoDirective, selector: "[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]", inputs: { ndcDynamicInputs: "ndcDynamicInputs", ngComponentOutletNdcDynamicInputs: "ngComponentOutletNdcDynamicInputs", ndcDynamicOutputs: "ndcDynamicOutputs", ngComponentOutletNdcDynamicOutputs: "ngComponentOutletNdcDynamicOutputs" }, providers: [IoService], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: DynamicIoDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',
                    providers: [IoService],
                }]
        }], ctorParameters: function () { return [{ type: i1.IoService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DynamicComponentInjectorToken]
                }, {
                    type: Optional
                }] }]; }, propDecorators: { ndcDynamicInputs: [{
                type: Input
            }], ngComponentOutletNdcDynamicInputs: [{
                type: Input
            }], ndcDynamicOutputs: [{
                type: Input
            }], ngComponentOutletNdcDynamicOutputs: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pby5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWNvbXBvbmVudC9zcmMvbGliL2R5bmFtaWMtaW8vZHluYW1pYy1pby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxNQUFNLEVBQ04sS0FBSyxFQUVMLFFBQVEsR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBRUwsNkJBQTZCLEdBQzlCLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFHN0MsNkRBQTZEO0FBTzdELE1BQU0sT0FBTyxrQkFBa0I7SUFrQjdCLFlBQ1UsU0FBb0IsRUFHcEIsaUJBQTRDO1FBSDVDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFHcEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEyQjtRQUVwRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBZkQsSUFBWSxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQztJQUMzRSxDQUFDO0lBV0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FDN0IsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sYUFBYSxDQUFDLE9BQXNCO1FBQzFDLE9BQU8sQ0FDTCxtQ0FBbUMsSUFBSSxPQUFPO1lBQzlDLGtCQUFrQixJQUFJLE9BQU8sQ0FDOUIsQ0FBQztJQUNKLENBQUM7SUFFTyxjQUFjLENBQUMsT0FBc0I7UUFDM0MsT0FBTyxDQUNMLG9DQUFvQyxJQUFJLE9BQU87WUFDL0MsbUJBQW1CLElBQUksT0FBTyxDQUMvQixDQUFDO0lBQ0osQ0FBQzs7cUpBcERVLGtCQUFrQiwyQ0FvQm5CLDZCQUE2Qjt5SUFwQjVCLGtCQUFrQixzWEFGbEIsQ0FBQyxTQUFTLENBQUM7MkZBRVgsa0JBQWtCO2tCQUw5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFDTixpSEFBaUg7b0JBQ25ILFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQztpQkFDdkI7OzBCQXFCSSxNQUFNOzJCQUFDLDZCQUE2Qjs7MEJBQ3BDLFFBQVE7NENBbkJYLGdCQUFnQjtzQkFEZixLQUFLO2dCQUdOLGlDQUFpQztzQkFEaEMsS0FBSztnQkFHTixpQkFBaUI7c0JBRGhCLEtBQUs7Z0JBR04sa0NBQWtDO3NCQURqQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBEb0NoZWNrLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9wdGlvbmFsLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29tcG9uZW50T3V0bGV0SW5qZWN0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9jb21wb25lbnQtaW5qZWN0b3IvY29tcG9uZW50LW91dGxldC1pbmplY3Rvci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgRHluYW1pY0NvbXBvbmVudEluamVjdG9yLFxuICBEeW5hbWljQ29tcG9uZW50SW5qZWN0b3JUb2tlbixcbn0gZnJvbSAnLi4vY29tcG9uZW50LWluamVjdG9yL3Rva2VuJztcbmltcG9ydCB7IElvU2VydmljZSB9IGZyb20gJy4uL2lvL2lvLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5wdXRzVHlwZSwgT3V0cHV0c1R5cGUgfSBmcm9tICcuLi9pby90eXBlcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9uby1jb25mbGljdGluZy1saWZlY3ljbGUgKi9cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICdbbmRjRHluYW1pY0lucHV0c10sW25kY0R5bmFtaWNPdXRwdXRzXSxbbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljSW5wdXRzXSxbbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0c10nLFxuICBwcm92aWRlcnM6IFtJb1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljSW9EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIERvQ2hlY2sge1xuICBASW5wdXQoKVxuICBuZGNEeW5hbWljSW5wdXRzOiBJbnB1dHNUeXBlO1xuICBASW5wdXQoKVxuICBuZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHM6IElucHV0c1R5cGU7XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNPdXRwdXRzOiBPdXRwdXRzVHlwZTtcbiAgQElucHV0KClcbiAgbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0czogT3V0cHV0c1R5cGU7XG5cbiAgcHJpdmF0ZSBnZXQgaW5wdXRzKCkge1xuICAgIHJldHVybiB0aGlzLm5kY0R5bmFtaWNJbnB1dHMgfHwgdGhpcy5uZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHM7XG4gIH1cblxuICBwcml2YXRlIGdldCBvdXRwdXRzKCkge1xuICAgIHJldHVybiB0aGlzLm5kY0R5bmFtaWNPdXRwdXRzIHx8IHRoaXMubmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW9TZXJ2aWNlOiBJb1NlcnZpY2UsXG4gICAgQEluamVjdChEeW5hbWljQ29tcG9uZW50SW5qZWN0b3JUb2tlbilcbiAgICBAT3B0aW9uYWwoKVxuICAgIHByaXZhdGUgY29tcG9uZW50SW5qZWN0b3I/OiBEeW5hbWljQ29tcG9uZW50SW5qZWN0b3IsXG4gICkge1xuICAgIHRoaXMuaW9TZXJ2aWNlLmluaXQodGhpcy5jb21wb25lbnRJbmplY3Rvcik7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5pb1NlcnZpY2UudXBkYXRlKFxuICAgICAgdGhpcy5pbnB1dHMsXG4gICAgICB0aGlzLm91dHB1dHMsXG4gICAgICB0aGlzLmlucHV0c0NoYW5nZWQoY2hhbmdlcyksXG4gICAgICB0aGlzLm91dHB1dHNDaGFuZ2VkKGNoYW5nZXMpLFxuICAgICk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgdGhpcy5pb1NlcnZpY2UubWF5YmVVcGRhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5wdXRzQ2hhbmdlZChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgICduZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHMnIGluIGNoYW5nZXMgfHxcbiAgICAgICduZGNEeW5hbWljSW5wdXRzJyBpbiBjaGFuZ2VzXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgb3V0cHV0c0NoYW5nZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAnbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0cycgaW4gY2hhbmdlcyB8fFxuICAgICAgJ25kY0R5bmFtaWNPdXRwdXRzJyBpbiBjaGFuZ2VzXG4gICAgKTtcbiAgfVxufVxuIl19